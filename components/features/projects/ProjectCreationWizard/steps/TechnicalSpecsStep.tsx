"use client"

import React, { useEffect, useState } from 'react'
import { Input } from '@/components/ui/input'
import { Textarea } from '@/components/ui/textarea'
import { Label } from '@/components/ui/label'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Badge } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Checkbox } from '@/components/ui/checkbox'
import { ProjectData } from '../ProjectCreationWizard'
import { AlertCircle, Droplets, Settings, Plus, X, Beaker, Zap } from 'lucide-react'\n\ninterface TechnicalSpecsStepProps {\n  data: ProjectData\n  onDataChange: (data: Partial<ProjectData>) => void\n  onValidationChange: (isValid: boolean) => void\n}\n\nconst capacityUnits = [\n  { value: 'L/s', label: 'Litros por segundo (L/s)' },\n  { value: 'L/min', label: 'Litros por minuto (L/min)' },\n  { value: 'L/h', label: 'Litros por hora (L/h)' },\n  { value: 'm³/h', label: 'Metros cúbicos por hora (m³/h)' },\n  { value: 'm³/day', label: 'Metros cúbicos por día (m³/día)' }\n]\n\nconst treatmentTypes = {\n  physical: {\n    label: 'Tratamiento Físico',\n    icon: Settings,\n    options: ['Sedimentación', 'Filtración', 'Flotación', 'Cribado', 'Desarenado']\n  },\n  chemical: {\n    label: 'Tratamiento Químico',\n    icon: Beaker,\n    options: ['Coagulación', 'Floculación', 'Precipitación', 'Oxidación', 'Neutralización']\n  },\n  biological: {\n    label: 'Tratamiento Biológico',\n    icon: Droplets,\n    options: ['Lodos Activados', 'Reactor UASB', 'Laguna de Estabilización', 'Filtro Biológico', 'MBR']\n  },\n  advanced: {\n    label: 'Tratamiento Avanzado',\n    icon: Zap,\n    options: ['Osmosis Inversa', 'Ultrafiltración', 'Nanofiltración', 'Carbón Activado', 'UV', 'Ozonización']\n  }\n}\n\nconst qualityStandards = [\n  'WHO - Directrices para la calidad del agua potable',\n  'EPA - Clean Water Act Standards',\n  'EU - Directiva del agua potable',\n  'ISO 14046 - Huella hídrica',\n  'Normas nacionales locales',\n  'Estándares industriales específicos'\n]\n\nexport function TechnicalSpecsStep({ data, onDataChange, onValidationChange }: TechnicalSpecsStepProps) {\n  const [errors, setErrors] = useState<Record<string, string>>({})\n  const [customTreatment, setCustomTreatment] = useState('')\n  const [customStandard, setCustomStandard] = useState('')\n\n  // Validation logic\n  const validateForm = () => {\n    const newErrors: Record<string, string> = {}\n\n    if (!data.capacity || data.capacity <= 0) {\n      newErrors.capacity = 'La capacidad debe ser mayor a 0'\n    }\n\n    if (!data.capacityUnit) {\n      newErrors.capacityUnit = 'Debe seleccionar una unidad de capacidad'\n    }\n\n    if (!data.treatmentType || data.treatmentType.length === 0) {\n      newErrors.treatmentType = 'Debe seleccionar al menos un tipo de tratamiento'\n    }\n\n    if (!data.qualityStandards || data.qualityStandards.length === 0) {\n      newErrors.qualityStandards = 'Debe seleccionar al menos un estándar de calidad'\n    }\n\n    setErrors(newErrors)\n    \n    const isValid = Object.keys(newErrors).length === 0\n    onValidationChange(isValid)\n    \n    return isValid\n  }\n\n  // Validate on data changes\n  useEffect(() => {\n    validateForm()\n  }, [data.capacity, data.capacityUnit, data.treatmentType, data.qualityStandards])\n\n  const handleInputChange = (field: keyof ProjectData) => (value: any) => {\n    onDataChange({ [field]: value })\n  }\n\n  const handleTreatmentTypeToggle = (treatment: string, checked: boolean) => {\n    const currentTypes = data.treatmentType || []\n    if (checked) {\n      handleInputChange('treatmentType')([...currentTypes, treatment])\n    } else {\n      handleInputChange('treatmentType')(currentTypes.filter(t => t !== treatment))\n    }\n  }\n\n  const handleQualityStandardToggle = (standard: string, checked: boolean) => {\n    const currentStandards = data.qualityStandards || []\n    if (checked) {\n      handleInputChange('qualityStandards')([...currentStandards, standard])\n    } else {\n      handleInputChange('qualityStandards')(currentStandards.filter(s => s !== standard))\n    }\n  }\n\n  const addCustomTreatment = () => {\n    if (customTreatment.trim()) {\n      const currentTypes = data.treatmentType || []\n      handleInputChange('treatmentType')([...currentTypes, customTreatment.trim()])\n      setCustomTreatment('')\n    }\n  }\n\n  const addCustomStandard = () => {\n    if (customStandard.trim()) {\n      const currentStandards = data.qualityStandards || []\n      handleInputChange('qualityStandards')([...currentStandards, customStandard.trim()])\n      setCustomStandard('')\n    }\n  }\n\n  const removeTreatmentType = (treatment: string) => {\n    const currentTypes = data.treatmentType || []\n    handleInputChange('treatmentType')(currentTypes.filter(t => t !== treatment))\n  }\n\n  const removeQualityStandard = (standard: string) => {\n    const currentStandards = data.qualityStandards || []\n    handleInputChange('qualityStandards')(currentStandards.filter(s => s !== standard))\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Capacity Section */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center gap-2\">\n            <Droplets className=\"h-4 w-4 text-primary\" />\n            <CardTitle className=\"text-base\">Capacidad de Tratamiento</CardTitle>\n          </div>\n          <CardDescription>\n            Especifique el caudal de diseño de la planta de tratamiento\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"capacity\" className=\"text-sm font-medium\">\n                Capacidad *\n              </Label>\n              <Input\n                id=\"capacity\"\n                type=\"number\"\n                placeholder=\"1000\"\n                min=\"0\"\n                step=\"0.01\"\n                value={data.capacity || ''}\n                onChange={(e) => handleInputChange('capacity')(parseFloat(e.target.value) || 0)}\n                className={errors.capacity ? 'border-destructive' : ''}\n              />\n              {errors.capacity && (\n                <div className=\"flex items-center gap-1 text-sm text-destructive\">\n                  <AlertCircle className=\"h-3 w-3\" />\n                  {errors.capacity}\n                </div>\n              )}\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label className=\"text-sm font-medium\">\n                Unidad *\n              </Label>\n              <Select\n                value={data.capacityUnit}\n                onValueChange={handleInputChange('capacityUnit')}\n              >\n                <SelectTrigger className={errors.capacityUnit ? 'border-destructive' : ''}>\n                  <SelectValue placeholder=\"Seleccionar unidad\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {capacityUnits.map((unit) => (\n                    <SelectItem key={unit.value} value={unit.value}>\n                      {unit.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              {errors.capacityUnit && (\n                <div className=\"flex items-center gap-1 text-sm text-destructive\">\n                  <AlertCircle className=\"h-3 w-3\" />\n                  {errors.capacityUnit}\n                </div>\n              )}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Treatment Types */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center gap-2\">\n            <Settings className=\"h-4 w-4 text-primary\" />\n            <CardTitle className=\"text-base\">Tipos de Tratamiento</CardTitle>\n          </div>\n          <CardDescription>\n            Seleccione los procesos de tratamiento requeridos\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {Object.entries(treatmentTypes).map(([category, config]) => {\n            const Icon = config.icon\n            return (\n              <div key={category} className=\"space-y-3\">\n                <div className=\"flex items-center gap-2\">\n                  <Icon className=\"h-4 w-4 text-muted-foreground\" />\n                  <h4 className=\"font-medium text-sm\">{config.label}</h4>\n                </div>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-2 ml-6\">\n                  {config.options.map((treatment) => (\n                    <div key={treatment} className=\"flex items-center space-x-2\">\n                      <Checkbox\n                        id={`treatment-${treatment}`}\n                        checked={data.treatmentType?.includes(treatment) || false}\n                        onCheckedChange={(checked) => handleTreatmentTypeToggle(treatment, checked as boolean)}\n                      />\n                      <Label htmlFor={`treatment-${treatment}`} className=\"text-sm\">\n                        {treatment}\n                      </Label>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )\n          })}\n          \n          {/* Selected treatments */}\n          {data.treatmentType && data.treatmentType.length > 0 && (\n            <div className=\"space-y-2\">\n              <Label className=\"text-sm font-medium\">Tratamientos seleccionados:</Label>\n              <div className=\"flex flex-wrap gap-2\">\n                {data.treatmentType.map((treatment) => (\n                  <Badge key={treatment} variant=\"secondary\" className=\"gap-1\">\n                    {treatment}\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      className=\"h-3 w-3 p-0 hover:bg-destructive/20\"\n                      onClick={() => removeTreatmentType(treatment)}\n                    >\n                      <X className=\"h-2 w-2\" />\n                    </Button>\n                  </Badge>\n                ))}\n              </div>\n            </div>\n          )}\n          \n          {/* Custom treatment */}\n          <div className=\"flex gap-2\">\n            <Input\n              placeholder=\"Agregar tratamiento personalizado...\"\n              value={customTreatment}\n              onChange={(e) => setCustomTreatment(e.target.value)}\n              onKeyDown={(e) => e.key === 'Enter' && addCustomTreatment()}\n            />\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={addCustomTreatment}\n              disabled={!customTreatment.trim()}\n            >\n              <Plus className=\"h-4 w-4\" />\n            </Button>\n          </div>\n          \n          {errors.treatmentType && (\n            <div className=\"flex items-center gap-1 text-sm text-destructive\">\n              <AlertCircle className=\"h-3 w-3\" />\n              {errors.treatmentType}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Quality Standards */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center gap-2\">\n            <Beaker className=\"h-4 w-4 text-primary\" />\n            <CardTitle className=\"text-base\">Estándares de Calidad</CardTitle>\n          </div>\n          <CardDescription>\n            Seleccione los estándares de calidad aplicables\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 gap-3\">\n            {qualityStandards.map((standard) => (\n              <div key={standard} className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id={`standard-${standard}`}\n                  checked={data.qualityStandards?.includes(standard) || false}\n                  onCheckedChange={(checked) => handleQualityStandardToggle(standard, checked as boolean)}\n                />\n                <Label htmlFor={`standard-${standard}`} className=\"text-sm\">\n                  {standard}\n                </Label>\n              </div>\n            ))}\n          </div>\n          \n          {/* Selected standards */}\n          {data.qualityStandards && data.qualityStandards.length > 0 && (\n            <div className=\"space-y-2\">\n              <Label className=\"text-sm font-medium\">Estándares seleccionados:</Label>\n              <div className=\"flex flex-wrap gap-2\">\n                {data.qualityStandards.map((standard) => (\n                  <Badge key={standard} variant=\"secondary\" className=\"gap-1\">\n                    {standard}\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      className=\"h-3 w-3 p-0 hover:bg-destructive/20\"\n                      onClick={() => removeQualityStandard(standard)}\n                    >\n                      <X className=\"h-2 w-2\" />\n                    </Button>\n                  </Badge>\n                ))}\n              </div>\n            </div>\n          )}\n          \n          {/* Custom standard */}\n          <div className=\"flex gap-2\">\n            <Input\n              placeholder=\"Agregar estándar personalizado...\"\n              value={customStandard}\n              onChange={(e) => setCustomStandard(e.target.value)}\n              onKeyDown={(e) => e.key === 'Enter' && addCustomStandard()}\n            />\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={addCustomStandard}\n              disabled={!customStandard.trim()}\n            >\n              <Plus className=\"h-4 w-4\" />\n            </Button>\n          </div>\n          \n          {errors.qualityStandards && (\n            <div className=\"flex items-center gap-1 text-sm text-destructive\">\n              <AlertCircle className=\"h-3 w-3\" />\n              {errors.qualityStandards}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Special Requirements */}\n      <div className=\"space-y-2\">\n        <Label htmlFor=\"special-requirements\" className=\"text-sm font-medium\">\n          Requerimientos Especiales\n        </Label>\n        <Textarea\n          id=\"special-requirements\"\n          placeholder=\"Describa cualquier requerimiento técnico especial, restricciones ambientales, o consideraciones particulares del proyecto...\"\n          rows={4}\n          value={data.specialRequirements}\n          onChange={(e) => handleInputChange('specialRequirements')(e.target.value)}\n        />\n        <div className=\"text-xs text-muted-foreground\">\n          Opcional - Información adicional que pueda afectar el diseño o implementación\n        </div>\n      </div>\n    </div>\n  )\n}"