"use client"

import React, { useEffect, useState } from 'react'
import { Input } from '@/components/ui/input'
import { Textarea } from '@/components/ui/textarea'
import { Label } from '@/components/ui/label'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Badge } from '@/components/ui/badge'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { ProjectData } from '../ProjectCreationWizard'
import { AlertCircle, Building2, FileText, Flag } from 'lucide-react'

interface BasicInfoStepProps {
  data: ProjectData
  onDataChange: (data: Partial<ProjectData>) => void
  onValidationChange: (isValid: boolean) => void
}

const projectTypes = [
  { value: 'wastewater', label: 'Aguas Residuales', description: 'Tratamiento de aguas servidas municipales e industriales' },
  { value: 'drinking_water', label: 'Agua Potable', description: 'Potabilización y distribución de agua para consumo' },
  { value: 'industrial', label: 'Industrial', description: 'Tratamiento especializado para procesos industriales' },
  { value: 'municipal', label: 'Municipal', description: 'Sistemas integrales para municipios y ciudades' }
]

const priorities = [
  { value: 'low', label: 'Baja', color: 'bg-gray-100 text-gray-800', description: 'Sin urgencia particular' },
  { value: 'medium', label: 'Media', color: 'bg-blue-100 text-blue-800', description: 'Prioridad estándar' },
  { value: 'high', label: 'Alta', color: 'bg-orange-100 text-orange-800', description: 'Requiere atención prioritaria' },
  { value: 'urgent', label: 'Urgente', color: 'bg-red-100 text-red-800', description: 'Máxima prioridad' }
]

export function BasicInfoStep({ data, onDataChange, onValidationChange }: BasicInfoStepProps) {
  const [errors, setErrors] = useState<Record<string, string>>({})\n\n  // Validation logic\n  const validateForm = () => {\n    const newErrors: Record<string, string> = {}\n\n    if (!data.name?.trim()) {\n      newErrors.name = 'El nombre del proyecto es requerido'\n    } else if (data.name.length < 3) {\n      newErrors.name = 'El nombre debe tener al menos 3 caracteres'\n    }\n\n    if (!data.description?.trim()) {\n      newErrors.description = 'La descripción es requerida'\n    } else if (data.description.length < 10) {\n      newErrors.description = 'La descripción debe tener al menos 10 caracteres'\n    }\n\n    if (!data.clientName?.trim()) {\n      newErrors.clientName = 'El nombre del cliente es requerido'\n    }\n\n    if (!data.projectType) {\n      newErrors.projectType = 'Debe seleccionar un tipo de proyecto'\n    }\n\n    setErrors(newErrors)\n    \n    const isValid = Object.keys(newErrors).length === 0\n    onValidationChange(isValid)\n    \n    return isValid\n  }\n\n  // Validate on data changes\n  useEffect(() => {\n    validateForm()\n  }, [data.name, data.description, data.clientName, data.projectType])\n\n  const handleInputChange = (field: keyof ProjectData) => (value: any) => {\n    onDataChange({ [field]: value })\n  }\n\n  const selectedProjectType = projectTypes.find(type => type.value === data.projectType)\n  const selectedPriority = priorities.find(priority => priority.value === data.priority)\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Project Name */}\n      <div className=\"space-y-2\">\n        <Label htmlFor=\"project-name\" className=\"text-sm font-medium\">\n          Nombre del Proyecto *\n        </Label>\n        <Input\n          id=\"project-name\"\n          placeholder=\"ej. Planta de Tratamiento Municipal Las Flores\"\n          value={data.name}\n          onChange={(e) => handleInputChange('name')(e.target.value)}\n          className={errors.name ? 'border-destructive' : ''}\n        />\n        {errors.name && (\n          <div className=\"flex items-center gap-1 text-sm text-destructive\">\n            <AlertCircle className=\"h-3 w-3\" />\n            {errors.name}\n          </div>\n        )}\n      </div>\n\n      {/* Project Description */}\n      <div className=\"space-y-2\">\n        <Label htmlFor=\"project-description\" className=\"text-sm font-medium\">\n          Descripción del Proyecto *\n        </Label>\n        <Textarea\n          id=\"project-description\"\n          placeholder=\"Describa brevemente el alcance y objetivos del proyecto...\"\n          rows={4}\n          value={data.description}\n          onChange={(e) => handleInputChange('description')(e.target.value)}\n          className={errors.description ? 'border-destructive' : ''}\n        />\n        {errors.description && (\n          <div className=\"flex items-center gap-1 text-sm text-destructive\">\n            <AlertCircle className=\"h-3 w-3\" />\n            {errors.description}\n          </div>\n        )}\n        <div className=\"text-xs text-muted-foreground\">\n          {data.description?.length || 0}/500 caracteres\n        </div>\n      </div>\n\n      {/* Client Information */}\n      <div className=\"space-y-2\">\n        <Label htmlFor=\"client-name\" className=\"text-sm font-medium\">\n          Cliente *\n        </Label>\n        <Input\n          id=\"client-name\"\n          placeholder=\"ej. Municipalidad de Las Flores\"\n          value={data.clientName}\n          onChange={(e) => handleInputChange('clientName')(e.target.value)}\n          className={errors.clientName ? 'border-destructive' : ''}\n        />\n        {errors.clientName && (\n          <div className=\"flex items-center gap-1 text-sm text-destructive\">\n            <AlertCircle className=\"h-3 w-3\" />\n            {errors.clientName}\n          </div>\n        )}\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        {/* Project Type */}\n        <div className=\"space-y-2\">\n          <Label className=\"text-sm font-medium\">\n            Tipo de Proyecto *\n          </Label>\n          <Select\n            value={data.projectType}\n            onValueChange={handleInputChange('projectType')}\n          >\n            <SelectTrigger className={errors.projectType ? 'border-destructive' : ''}>\n              <SelectValue placeholder=\"Seleccionar tipo\" />\n            </SelectTrigger>\n            <SelectContent>\n              {projectTypes.map((type) => (\n                <SelectItem key={type.value} value={type.value}>\n                  <div className=\"flex flex-col\">\n                    <span className=\"font-medium\">{type.label}</span>\n                    <span className=\"text-xs text-muted-foreground\">{type.description}</span>\n                  </div>\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n          {errors.projectType && (\n            <div className=\"flex items-center gap-1 text-sm text-destructive\">\n              <AlertCircle className=\"h-3 w-3\" />\n              {errors.projectType}\n            </div>\n          )}\n        </div>\n\n        {/* Priority */}\n        <div className=\"space-y-2\">\n          <Label className=\"text-sm font-medium\">\n            Prioridad\n          </Label>\n          <Select\n            value={data.priority}\n            onValueChange={handleInputChange('priority')}\n          >\n            <SelectTrigger>\n              <SelectValue placeholder=\"Seleccionar prioridad\" />\n            </SelectTrigger>\n            <SelectContent>\n              {priorities.map((priority) => (\n                <SelectItem key={priority.value} value={priority.value}>\n                  <div className=\"flex items-center gap-2\">\n                    <Badge variant=\"secondary\" className={priority.color}>\n                      {priority.label}\n                    </Badge>\n                    <span className=\"text-xs text-muted-foreground\">{priority.description}</span>\n                  </div>\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n      </div>\n\n      {/* Summary Cards */}\n      {(selectedProjectType || selectedPriority) && (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          {selectedProjectType && (\n            <Card className=\"border-primary/20\">\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-center gap-2\">\n                  <Building2 className=\"h-4 w-4 text-primary\" />\n                  <CardTitle className=\"text-sm\">Tipo de Proyecto</CardTitle>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-1\">\n                  <div className=\"font-medium\">{selectedProjectType.label}</div>\n                  <div className=\"text-xs text-muted-foreground\">\n                    {selectedProjectType.description}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n          \n          {selectedPriority && (\n            <Card className=\"border-amber-200\">\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-center gap-2\">\n                  <Flag className=\"h-4 w-4 text-amber-600\" />\n                  <CardTitle className=\"text-sm\">Prioridad</CardTitle>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-1\">\n                  <Badge variant=\"secondary\" className={selectedPriority.color}>\n                    {selectedPriority.label}\n                  </Badge>\n                  <div className=\"text-xs text-muted-foreground\">\n                    {selectedPriority.description}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      )}\n\n      {/* Help Text */}\n      <div className=\"bg-muted/50 p-4 rounded-lg\">\n        <div className=\"flex items-start gap-2\">\n          <FileText className=\"h-4 w-4 text-muted-foreground mt-0.5 flex-shrink-0\" />\n          <div className=\"text-sm text-muted-foreground\">\n            <strong>Consejos:</strong>\n            <ul className=\"mt-2 space-y-1 list-disc list-inside\">\n              <li>Use nombres descriptivos que identifiquen claramente el proyecto</li>\n              <li>Incluya la ubicación en el nombre si es relevante</li>\n              <li>La descripción debe resumir el alcance y objetivos principales</li>\n              <li>El tipo de proyecto determina las opciones técnicas disponibles</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}"