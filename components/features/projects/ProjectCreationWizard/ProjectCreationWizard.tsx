"use client"

import React, { useState, useCallback } from 'react'
import { cn } from '@/lib/utils'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Progress } from '@/components/ui/progress'
import { Badge } from '@/components/ui/badge'
import { Separator } from '@/components/ui/separator'
import {\n  Check,\n  ChevronLeft,\n  ChevronRight,\n  AlertCircle,\n  FileText,\n  Settings,\n  Users,\n  Droplets,\n  MapPin,\n  Calendar,\n  DollarSign\n} from 'lucide-react'\nimport { BasicInfoStep } from './steps/BasicInfoStep'\nimport { TechnicalSpecsStep } from './steps/TechnicalSpecsStep'\nimport { LocationStep } from './steps/LocationStep'\nimport { TeamStep } from './steps/TeamStep'\nimport { TimelineStep } from './steps/TimelineStep'\nimport { BudgetStep } from './steps/BudgetStep'\nimport { ReviewStep } from './steps/ReviewStep'\n\n// Types\nexport interface ProjectData {\n  // Basic Info\n  name: string\n  description: string\n  clientName: string\n  projectType: 'wastewater' | 'drinking_water' | 'industrial' | 'municipal'\n  priority: 'low' | 'medium' | 'high' | 'urgent'\n  \n  // Technical Specs\n  capacity: number\n  capacityUnit: 'L/s' | 'L/min' | 'L/h' | 'm³/h' | 'm³/day'\n  treatmentType: string[]\n  qualityStandards: string[]\n  specialRequirements: string\n  \n  // Location\n  country: string\n  region: string\n  city: string\n  address: string\n  coordinates?: { lat: number; lng: number }\n  environmentalFactors: string[]\n  \n  // Team\n  projectManager: string\n  technicalLead: string\n  teamMembers: string[]\n  clientContacts: { name: string; role: string; email: string }[]\n  \n  // Timeline\n  startDate: Date\n  estimatedDuration: number\n  milestones: { name: string; date: Date; description: string }[]\n  \n  // Budget\n  estimatedCost: number\n  currency: string\n  budgetBreakdown: { category: string; amount: number; percentage: number }[]\n  \n  // Additional\n  tags: string[]\n  attachments: File[]\n  notes: string\n}\n\ninterface WizardStep {\n  id: string\n  title: string\n  description: string\n  icon: React.ComponentType<{ className?: string }>\n  isCompleted: boolean\n  isActive: boolean\n  hasError: boolean\n  component: React.ComponentType<{\n    data: ProjectData\n    onDataChange: (data: Partial<ProjectData>) => void\n    onValidationChange: (isValid: boolean) => void\n  }>\n}\n\ninterface ProjectCreationWizardProps {\n  onProjectCreate: (data: ProjectData) => Promise<void>\n  onCancel?: () => void\n  className?: string\n}\n\nexport function ProjectCreationWizard({\n  onProjectCreate,\n  onCancel,\n  className\n}: ProjectCreationWizardProps) {\n  const [currentStepIndex, setCurrentStepIndex] = useState(0)\n  const [projectData, setProjectData] = useState<ProjectData>({\n    name: '',\n    description: '',\n    clientName: '',\n    projectType: 'municipal',\n    priority: 'medium',\n    capacity: 0,\n    capacityUnit: 'L/s',\n    treatmentType: [],\n    qualityStandards: [],\n    specialRequirements: '',\n    country: '',\n    region: '',\n    city: '',\n    address: '',\n    environmentalFactors: [],\n    projectManager: '',\n    technicalLead: '',\n    teamMembers: [],\n    clientContacts: [],\n    startDate: new Date(),\n    estimatedDuration: 0,\n    milestones: [],\n    estimatedCost: 0,\n    currency: 'USD',\n    budgetBreakdown: [],\n    tags: [],\n    attachments: [],\n    notes: ''\n  })\n  \n  const [stepValidations, setStepValidations] = useState<Record<string, boolean>>({})\n  const [isSubmitting, setIsSubmitting] = useState(false)\n\n  // Define wizard steps\n  const steps: WizardStep[] = [\n    {\n      id: 'basic-info',\n      title: 'Información Básica',\n      description: 'Datos generales del proyecto',\n      icon: FileText,\n      isCompleted: stepValidations['basic-info'] || false,\n      isActive: currentStepIndex === 0,\n      hasError: false,\n      component: BasicInfoStep\n    },\n    {\n      id: 'technical-specs',\n      title: 'Especificaciones Técnicas',\n      description: 'Parámetros de tratamiento',\n      icon: Settings,\n      isCompleted: stepValidations['technical-specs'] || false,\n      isActive: currentStepIndex === 1,\n      hasError: false,\n      component: TechnicalSpecsStep\n    },\n    {\n      id: 'location',\n      title: 'Ubicación',\n      description: 'Datos geográficos y ambientales',\n      icon: MapPin,\n      isCompleted: stepValidations['location'] || false,\n      isActive: currentStepIndex === 2,\n      hasError: false,\n      component: LocationStep\n    },\n    {\n      id: 'team',\n      title: 'Equipo',\n      description: 'Personal asignado',\n      icon: Users,\n      isCompleted: stepValidations['team'] || false,\n      isActive: currentStepIndex === 3,\n      hasError: false,\n      component: TeamStep\n    },\n    {\n      id: 'timeline',\n      title: 'Cronograma',\n      description: 'Fechas y milestones',\n      icon: Calendar,\n      isCompleted: stepValidations['timeline'] || false,\n      isActive: currentStepIndex === 4,\n      hasError: false,\n      component: TimelineStep\n    },\n    {\n      id: 'budget',\n      title: 'Presupuesto',\n      description: 'Costos estimados',\n      icon: DollarSign,\n      isCompleted: stepValidations['budget'] || false,\n      isActive: currentStepIndex === 5,\n      hasError: false,\n      component: BudgetStep\n    },\n    {\n      id: 'review',\n      title: 'Revisión',\n      description: 'Confirmar datos',\n      icon: Check,\n      isCompleted: false,\n      isActive: currentStepIndex === 6,\n      hasError: false,\n      component: ReviewStep\n    }\n  ]\n\n  const currentStep = steps[currentStepIndex]\n  const CurrentStepComponent = currentStep.component\n\n  // Progress calculation\n  const completedSteps = Object.values(stepValidations).filter(Boolean).length\n  const progress = (completedSteps / (steps.length - 1)) * 100 // Exclude review step\n\n  // Handlers\n  const handleDataChange = useCallback((newData: Partial<ProjectData>) => {\n    setProjectData(current => ({ ...current, ...newData }))\n  }, [])\n\n  const handleValidationChange = useCallback((isValid: boolean) => {\n    setStepValidations(current => ({\n      ...current,\n      [currentStep.id]: isValid\n    }))\n  }, [currentStep.id])\n\n  const handleNext = useCallback(() => {\n    if (currentStepIndex < steps.length - 1) {\n      setCurrentStepIndex(current => current + 1)\n    }\n  }, [currentStepIndex, steps.length])\n\n  const handlePrevious = useCallback(() => {\n    if (currentStepIndex > 0) {\n      setCurrentStepIndex(current => current - 1)\n    }\n  }, [currentStepIndex])\n\n  const handleStepClick = useCallback((stepIndex: number) => {\n    // Only allow going to previous steps or next immediate step if current is valid\n    if (stepIndex < currentStepIndex || \n        (stepIndex === currentStepIndex + 1 && stepValidations[currentStep.id])) {\n      setCurrentStepIndex(stepIndex)\n    }\n  }, [currentStepIndex, stepValidations, currentStep.id])\n\n  const handleSubmit = async () => {\n    if (currentStepIndex !== steps.length - 1) return\n    \n    setIsSubmitting(true)\n    try {\n      await onProjectCreate(projectData)\n    } catch (error) {\n      console.error('Error creating project:', error)\n    } finally {\n      setIsSubmitting(false)\n    }\n  }\n\n  const canProceed = stepValidations[currentStep.id] || currentStepIndex === steps.length - 1\n  const isLastStep = currentStepIndex === steps.length - 1\n\n  return (\n    <div className={cn('max-w-6xl mx-auto p-6', className)}>\n      {/* Header */}\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold mb-2\">Crear Nuevo Proyecto</h1>\n        <p className=\"text-muted-foreground\">\n          Complete la información necesaria para crear su proyecto de tratamiento de agua\n        </p>\n      </div>\n\n      {/* Progress */}\n      <div className=\"mb-8\">\n        <div className=\"flex justify-between items-center mb-4\">\n          <span className=\"text-sm font-medium\">Progreso del proyecto</span>\n          <span className=\"text-sm text-muted-foreground\">\n            {completedSteps} de {steps.length - 1} pasos completados\n          </span>\n        </div>\n        <Progress value={progress} className=\"h-2\" />\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8\">\n        {/* Step Navigation */}\n        <div className=\"lg:col-span-1\">\n          <nav className=\"space-y-2\">\n            {steps.map((step, index) => {\n              const isClickable = index < currentStepIndex || \n                                (index === currentStepIndex + 1 && stepValidations[currentStep.id])\n              \n              return (\n                <button\n                  key={step.id}\n                  onClick={() => handleStepClick(index)}\n                  disabled={!isClickable && index !== currentStepIndex}\n                  className={cn(\n                    'w-full flex items-center gap-3 p-3 rounded-lg text-left transition-all',\n                    step.isActive && 'bg-primary/10 border-primary border',\n                    step.isCompleted && 'bg-green-50 border-green-200 border',\n                    !step.isActive && !step.isCompleted && 'hover:bg-muted/50',\n                    (!isClickable && index !== currentStepIndex) && 'opacity-50 cursor-not-allowed'\n                  )}\n                >\n                  <div className={cn(\n                    'flex-shrink-0 w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium',\n                    step.isActive && 'bg-primary text-primary-foreground',\n                    step.isCompleted && 'bg-green-500 text-white',\n                    !step.isActive && !step.isCompleted && 'bg-muted text-muted-foreground'\n                  )}>\n                    {step.isCompleted ? (\n                      <Check className=\"h-4 w-4\" />\n                    ) : (\n                      <step.icon className=\"h-4 w-4\" />\n                    )}\n                  </div>\n                  \n                  <div className=\"flex-1 min-w-0\">\n                    <div className={cn(\n                      'font-medium text-sm',\n                      step.isActive && 'text-primary',\n                      step.isCompleted && 'text-green-700',\n                      !step.isActive && !step.isCompleted && 'text-muted-foreground'\n                    )}>\n                      {step.title}\n                    </div>\n                    <div className=\"text-xs text-muted-foreground truncate\">\n                      {step.description}\n                    </div>\n                  </div>\n                </button>\n              )\n            })}\n          </nav>\n        </div>\n\n        {/* Step Content */}\n        <div className=\"lg:col-span-3\">\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center gap-3\">\n                <div className=\"p-2 bg-primary/10 rounded-lg\">\n                  <currentStep.icon className=\"h-5 w-5 text-primary\" />\n                </div>\n                <div>\n                  <CardTitle>{currentStep.title}</CardTitle>\n                  <CardDescription>{currentStep.description}</CardDescription>\n                </div>\n              </div>\n            </CardHeader>\n            \n            <CardContent>\n              <CurrentStepComponent\n                data={projectData}\n                onDataChange={handleDataChange}\n                onValidationChange={handleValidationChange}\n              />\n            </CardContent>\n          </Card>\n\n          {/* Navigation Buttons */}\n          <div className=\"flex items-center justify-between mt-6\">\n            <div>\n              {currentStepIndex > 0 && (\n                <Button\n                  variant=\"outline\"\n                  onClick={handlePrevious}\n                  disabled={isSubmitting}\n                >\n                  <ChevronLeft className=\"h-4 w-4 mr-1\" />\n                  Anterior\n                </Button>\n              )}\n            </div>\n\n            <div className=\"flex items-center gap-3\">\n              {onCancel && (\n                <Button\n                  variant=\"ghost\"\n                  onClick={onCancel}\n                  disabled={isSubmitting}\n                >\n                  Cancelar\n                </Button>\n              )}\n              \n              {isLastStep ? (\n                <Button\n                  onClick={handleSubmit}\n                  disabled={isSubmitting}\n                  className=\"min-w-32\"\n                >\n                  {isSubmitting ? 'Creando...' : 'Crear Proyecto'}\n                </Button>\n              ) : (\n                <Button\n                  onClick={handleNext}\n                  disabled={!canProceed || isSubmitting}\n                >\n                  Siguiente\n                  <ChevronRight className=\"h-4 w-4 ml-1\" />\n                </Button>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}"