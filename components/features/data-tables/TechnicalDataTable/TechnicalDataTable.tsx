"use client"

import React, { useState, useCallback, useMemo } from 'react'
import { cn } from '@/lib/utils'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Badge } from '@/components/ui/badge'
import { Checkbox } from '@/components/ui/checkbox'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { LoadingSpinner } from '@/components/ui/loading-spinner'
import { EditableCell } from '@/components/ui/editable-cell'
import {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table'\nimport {\n  Trash2,\n  Plus,\n  Save,\n  X,\n  AlertTriangle,\n  CheckCircle,\n  Filter,\n  Download,\n  Upload,\n  MoreHorizontal,\n  Eye,\n  EyeOff\n} from 'lucide-react'\nimport { colors } from '@/components/design-system/tokens/design-tokens'\n\n// Types\nexport interface TechnicalParameter {\n  id: string\n  name: string\n  value: number | string\n  unit: string\n  normalRange: { min: number; max: number }\n  category: 'physical' | 'chemical' | 'biological' | 'operational'\n  isRequired: boolean\n  lastUpdated: Date\n  status: 'normal' | 'warning' | 'critical'\n  notes?: string\n}\n\nexport interface ColumnDefinition {\n  key: keyof TechnicalParameter | 'actions'\n  header: string\n  width?: string\n  sortable?: boolean\n  filterable?: boolean\n  editable?: boolean\n  type?: 'text' | 'number' | 'select' | 'date' | 'boolean'\n  options?: { value: string; label: string }[]\n  render?: (value: any, row: TechnicalParameter) => React.ReactNode\n}\n\ninterface TechnicalDataTableProps {\n  data: TechnicalParameter[]\n  columns?: ColumnDefinition[]\n  onDataChange?: (data: TechnicalParameter[]) => void\n  onRowAdd?: () => TechnicalParameter\n  onRowDelete?: (id: string) => void\n  isEditable?: boolean\n  isLoading?: boolean\n  showFilters?: boolean\n  showActions?: boolean\n  className?: string\n}\n\n// Default columns configuration\nconst defaultColumns: ColumnDefinition[] = [\n  {\n    key: 'name',\n    header: 'Parámetro',\n    width: 'w-48',\n    sortable: true,\n    filterable: true,\n    editable: true,\n    type: 'text'\n  },\n  {\n    key: 'value',\n    header: 'Valor',\n    width: 'w-24',\n    sortable: true,\n    editable: true,\n    type: 'number',\n    render: (value, row) => (\n      <div className=\"flex items-center gap-2\">\n        <span className={cn(\n          'font-mono',\n          row.status === 'critical' && 'text-destructive font-semibold',\n          row.status === 'warning' && 'text-amber-600 font-medium',\n          row.status === 'normal' && 'text-green-600'\n        )}>\n          {value}\n        </span>\n        <span className=\"text-xs text-muted-foreground\">{row.unit}</span>\n      </div>\n    )\n  },\n  {\n    key: 'normalRange',\n    header: 'Rango Normal',\n    width: 'w-32',\n    render: (range) => (\n      <span className=\"text-xs text-muted-foreground font-mono\">\n        {range.min} - {range.max}\n      </span>\n    )\n  },\n  {\n    key: 'category',\n    header: 'Categoría',\n    width: 'w-32',\n    sortable: true,\n    filterable: true,\n    editable: true,\n    type: 'select',\n    options: [\n      { value: 'physical', label: 'Físico' },\n      { value: 'chemical', label: 'Químico' },\n      { value: 'biological', label: 'Biológico' },\n      { value: 'operational', label: 'Operacional' }\n    ],\n    render: (category) => {\n      const categoryConfig = {\n        physical: { label: 'Físico', color: 'bg-blue-100 text-blue-800' },\n        chemical: { label: 'Químico', color: 'bg-purple-100 text-purple-800' },\n        biological: { label: 'Biológico', color: 'bg-green-100 text-green-800' },\n        operational: { label: 'Operacional', color: 'bg-orange-100 text-orange-800' }\n      }[category] || { label: category, color: 'bg-gray-100 text-gray-800' }\n      \n      return (\n        <Badge variant=\"secondary\" className={categoryConfig.color}>\n          {categoryConfig.label}\n        </Badge>\n      )\n    }\n  },\n  {\n    key: 'status',\n    header: 'Estado',\n    width: 'w-24',\n    sortable: true,\n    filterable: true,\n    render: (status) => {\n      const statusConfig = {\n        normal: { icon: CheckCircle, color: 'text-green-600', label: 'Normal' },\n        warning: { icon: AlertTriangle, color: 'text-amber-600', label: 'Advertencia' },\n        critical: { icon: AlertTriangle, color: 'text-destructive', label: 'Crítico' }\n      }[status]\n      \n      const Icon = statusConfig.icon\n      \n      return (\n        <div className=\"flex items-center gap-1\">\n          <Icon className={cn('h-3 w-3', statusConfig.color)} />\n          <span className={cn('text-xs', statusConfig.color)}>\n            {statusConfig.label}\n          </span>\n        </div>\n      )\n    }\n  },\n  {\n    key: 'lastUpdated',\n    header: 'Actualizado',\n    width: 'w-28',\n    sortable: true,\n    render: (date) => (\n      <span className=\"text-xs text-muted-foreground\">\n        {new Intl.DateTimeFormat('es-ES', {\n          day: '2-digit',\n          month: '2-digit',\n          year: '2-digit',\n          hour: '2-digit',\n          minute: '2-digit'\n        }).format(date)}\n      </span>\n    )\n  },\n  {\n    key: 'actions',\n    header: '',\n    width: 'w-16'\n  }\n]\n\nexport function TechnicalDataTable({\n  data,\n  columns = defaultColumns,\n  onDataChange,\n  onRowAdd,\n  onRowDelete,\n  isEditable = true,\n  isLoading = false,\n  showFilters = true,\n  showActions = true,\n  className\n}: TechnicalDataTableProps) {\n  const [selectedRows, setSelectedRows] = useState<Set<string>>(new Set())\n  const [sortConfig, setSortConfig] = useState<{ key: string; direction: 'asc' | 'desc' } | null>(null)\n  const [filters, setFilters] = useState<Record<string, string>>({})\n  const [hiddenColumns, setHiddenColumns] = useState<Set<string>>(new Set())\n\n  // Sorting\n  const handleSort = useCallback((key: string) => {\n    setSortConfig(current => ({\n      key,\n      direction: current?.key === key && current.direction === 'asc' ? 'desc' : 'asc'\n    }))\n  }, [])\n\n  // Filtering\n  const filteredData = useMemo(() => {\n    let filtered = [...data]\n    \n    Object.entries(filters).forEach(([key, value]) => {\n      if (value) {\n        filtered = filtered.filter(row => {\n          const cellValue = row[key as keyof TechnicalParameter]\n          return String(cellValue).toLowerCase().includes(value.toLowerCase())\n        })\n      }\n    })\n    \n    return filtered\n  }, [data, filters])\n\n  // Sorted data\n  const sortedData = useMemo(() => {\n    if (!sortConfig) return filteredData\n    \n    return [...filteredData].sort((a, b) => {\n      const aValue = a[sortConfig.key as keyof TechnicalParameter]\n      const bValue = b[sortConfig.key as keyof TechnicalParameter]\n      \n      if (aValue < bValue) return sortConfig.direction === 'asc' ? -1 : 1\n      if (aValue > bValue) return sortConfig.direction === 'asc' ? 1 : -1\n      return 0\n    })\n  }, [filteredData, sortConfig])\n\n  // Cell edit handler\n  const handleCellEdit = useCallback((rowId: string, key: string, value: any) => {\n    if (!onDataChange) return\n    \n    const updatedData = data.map(row => {\n      if (row.id === rowId) {\n        const updatedRow = { ...row, [key]: value, lastUpdated: new Date() }\n        \n        // Recalculate status if value changed\n        if (key === 'value' && typeof value === 'number') {\n          const { min, max } = row.normalRange\n          if (value < min * 0.8 || value > max * 1.2) {\n            updatedRow.status = 'critical'\n          } else if (value < min || value > max) {\n            updatedRow.status = 'warning'\n          } else {\n            updatedRow.status = 'normal'\n          }\n        }\n        \n        return updatedRow\n      }\n      return row\n    })\n    \n    onDataChange(updatedData)\n  }, [data, onDataChange])\n\n  // Row selection\n  const handleRowSelect = useCallback((rowId: string, selected: boolean) => {\n    setSelectedRows(current => {\n      const updated = new Set(current)\n      if (selected) {\n        updated.add(rowId)\n      } else {\n        updated.delete(rowId)\n      }\n      return updated\n    })\n  }, [])\n\n  // Select all\n  const handleSelectAll = useCallback((selected: boolean) => {\n    if (selected) {\n      setSelectedRows(new Set(sortedData.map(row => row.id)))\n    } else {\n      setSelectedRows(new Set())\n    }\n  }, [sortedData])\n\n  // Visible columns\n  const visibleColumns = useMemo(() => {\n    return columns.filter(col => !hiddenColumns.has(col.key.toString()))\n  }, [columns, hiddenColumns])\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <LoadingSpinner size=\"lg\" />\n        <span className=\"ml-2 text-muted-foreground\">Cargando datos técnicos...</span>\n      </div>\n    )\n  }\n\n  return (\n    <div className={cn('space-y-4', className)}>\n      {/* Actions Header */}\n      {showActions && (\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            {selectedRows.size > 0 && (\n              <Button\n                variant=\"destructive\"\n                size=\"sm\"\n                onClick={() => {\n                  selectedRows.forEach(id => onRowDelete?.(id))\n                  setSelectedRows(new Set())\n                }}\n              >\n                <Trash2 className=\"h-4 w-4 mr-1\" />\n                Eliminar ({selectedRows.size})\n              </Button>\n            )}\n            \n            {isEditable && onRowAdd && (\n              <Button variant=\"outline\" size=\"sm\" onClick={() => {\n                const newRow = onRowAdd()\n                onDataChange?.([...data, newRow])\n              }}>\n                <Plus className=\"h-4 w-4 mr-1\" />\n                Agregar parámetro\n              </Button>\n            )}\n          </div>\n          \n          <div className=\"flex items-center gap-2\">\n            <Button variant=\"ghost\" size=\"sm\">\n              <Download className=\"h-4 w-4 mr-1\" />\n              Exportar\n            </Button>\n            <Button variant=\"ghost\" size=\"sm\">\n              <Upload className=\"h-4 w-4 mr-1\" />\n              Importar\n            </Button>\n          </div>\n        </div>\n      )}\n\n      {/* Filters */}\n      {showFilters && (\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 p-4 bg-muted/50 rounded-lg\">\n          {columns\n            .filter(col => col.filterable && col.key !== 'actions')\n            .map(col => (\n              <div key={col.key.toString()}>\n                <label className=\"text-xs font-medium text-muted-foreground mb-1 block\">\n                  {col.header}\n                </label>\n                <Input\n                  size=\"sm\"\n                  placeholder={`Filtrar por ${col.header.toLowerCase()}...`}\n                  value={filters[col.key.toString()] || ''}\n                  onChange={(e) => setFilters(current => ({\n                    ...current,\n                    [col.key.toString()]: e.target.value\n                  }))}\n                />\n              </div>\n            ))\n          }\n        </div>\n      )}\n\n      {/* Table */}\n      <div className=\"rounded-md border\">\n        <Table>\n          <TableHeader>\n            <TableRow>\n              {/* Select all checkbox */}\n              <TableHead className=\"w-12\">\n                <Checkbox\n                  checked={selectedRows.size === sortedData.length && sortedData.length > 0}\n                  onCheckedChange={handleSelectAll}\n                />\n              </TableHead>\n              \n              {visibleColumns.map(col => (\n                <TableHead\n                  key={col.key.toString()}\n                  className={cn(col.width, col.sortable && 'cursor-pointer hover:bg-muted/50')}\n                  onClick={() => col.sortable && handleSort(col.key.toString())}\n                >\n                  <div className=\"flex items-center gap-1\">\n                    {col.header}\n                    {col.sortable && sortConfig?.key === col.key.toString() && (\n                      <span className=\"text-xs\">\n                        {sortConfig.direction === 'asc' ? '↑' : '↓'}\n                      </span>\n                    )}\n                  </div>\n                </TableHead>\n              ))}\n            </TableRow>\n          </TableHeader>\n          \n          <TableBody>\n            {sortedData.map(row => (\n              <TableRow\n                key={row.id}\n                className={cn(\n                  'hover:bg-muted/50',\n                  selectedRows.has(row.id) && 'bg-muted/50'\n                )}\n              >\n                {/* Row selection */}\n                <TableCell>\n                  <Checkbox\n                    checked={selectedRows.has(row.id)}\n                    onCheckedChange={(checked) => handleRowSelect(row.id, checked as boolean)}\n                  />\n                </TableCell>\n                \n                {visibleColumns.map(col => (\n                  <TableCell key={col.key.toString()} className={col.width}>\n                    {col.key === 'actions' ? (\n                      <div className=\"flex items-center gap-1\">\n                        <Button variant=\"ghost\" size=\"icon\" className=\"h-6 w-6\">\n                          <MoreHorizontal className=\"h-3 w-3\" />\n                        </Button>\n                      </div>\n                    ) : col.editable && isEditable ? (\n                      <EditableCell\n                        value={row[col.key as keyof TechnicalParameter]}\n                        type={col.type || 'text'}\n                        options={col.options}\n                        onChange={(value) => handleCellEdit(row.id, col.key.toString(), value)}\n                      />\n                    ) : col.render ? (\n                      col.render(row[col.key as keyof TechnicalParameter], row)\n                    ) : (\n                      String(row[col.key as keyof TechnicalParameter])\n                    )}\n                  </TableCell>\n                ))}\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </div>\n\n      {/* Footer */}\n      <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n        <div>\n          {sortedData.length} de {data.length} parámetros\n          {selectedRows.size > 0 && ` • ${selectedRows.size} seleccionados`}\n        </div>\n        <div>\n          {filters && Object.values(filters).some(Boolean) && 'Filtros aplicados'}\n        </div>\n      </div>\n    </div>\n  )\n}"